package org.example.DAO;

import org.example.Model.Veiculo;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class VeiculoDAO {
    Connection con;

    public VeiculoDAO() { // construtor
        con = ConexaoBD.conectarBD();
    }

    public void criarTabelaVeiculo() {
        Statement st = null;

        try {
            if (con == null) {
                System.out.println("Erro: Conexão não estabelecida.");
                return;
            }

            st = con.createStatement();
            // Criação da tabela no banco com veiculo_id auto-incrementado
            String sql = "CREATE TABLE TBL_VEICULO ("
                    + "veiculo_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                    + "cliente_id INTEGER, "
                    + "marca VARCHAR(50) NOT NULL, "
                    + "modelo VARCHAR(50) NOT NULL, "
                    + "ano_fabricacao VARCHAR(4) NOT NULL, "
                    + "numero_chassi VARCHAR(50) UNIQUE NOT NULL, "
                    + "CONSTRAINT chk_ano_fabricacao CHECK (TO_NUMBER(ano_fabricacao) BETWEEN 1886 AND 2024), "
                    + "FOREIGN KEY (cliente_id) REFERENCES TBL_CLIENTE(cliente_id)"
                    + ")";
            st.executeUpdate(sql);
            st.close();

            System.out.println("\nTBL_VEICULO criada com sucesso!");

        } catch (SQLException e) {
            System.out.println("\nErro na criação da Tabela: " + e.getMessage());
        } finally {
            try {
                if (st != null) st.close();
            } catch (SQLException e) {
                System.out.println("\nErro na criação da Tabela: " + e.getMessage());
            }
        }
    }

    public void inserirVeiculo(int cliente_id, String marca, String modelo, String ano_fabricacao, String numero_chassi) {
        try {
            if (con == null) {
                System.out.println("\nErro: Conexão não estabelecida.");
                return;
            }

            // Inserção de dados sem veiculo_id, pois ele será gerado automaticamente
            String sql = "INSERT INTO TBL_VEICULO (cliente_id, marca, modelo, ano_fabricacao, numero_chassi) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement st = con.prepareStatement(sql);
            st.setInt(1, cliente_id);
            st.setString(2, marca);
            st.setString(3, modelo);
            st.setString(4, ano_fabricacao);
            st.setString(5, numero_chassi);
            st.executeUpdate();
            st.close();

            System.out.println("\nNovo veículo cadastrado!");

        } catch (SQLException e) {
            System.out.println("\nErro no insert na TBL_VEICULO: " + e.getMessage());
        }
    }

    public List<Veiculo> recuperarVeiculos() {
        Statement st;
        ResultSet rs;
        List<Veiculo> lv = new ArrayList<>();
        try {
            st = con.createStatement();
            rs = st.executeQuery("SELECT * FROM TBL_VEICULO");
            System.out.println("\n\nLista dos Veículos cadastrados: ");
            while (rs.next()) {
                Veiculo v = new Veiculo(rs.getInt(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6));
                lv.add(v);
            }
        } catch (SQLException e) {
            System.out.println("\nErro no select ");
        }
        return lv;
    }

    public List<Veiculo> buscarVeiculoChassi(String numero_chassi) {
        PreparedStatement pst = null;
        ResultSet rs = null;
        List<Veiculo> lvb = new ArrayList<>();

        try {
            pst = con.prepareStatement("SELECT * FROM TBL_VEICULO WHERE numero_chassi = ?");
            pst.setString(1, numero_chassi);
            rs = pst.executeQuery();

            while (rs.next()) {
                Veiculo v = new Veiculo(rs.getInt(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6));
                lvb.add(v);
            }
            pst.close();

        } catch (SQLException e) {
            System.out.println("\nErro na busca");
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
            } catch (SQLException e) {
                System.out.println("\nErro na busca");
            }
        }
        return lvb;
    }

    public void dropTabelaVeiculo() {
        Statement st = null;

        try {
            if (con == null) {
                System.out.println("Erro: Conexão não estabelecida.");
                return;
            }

            st = con.createStatement();

            String sql = "DROP TABLE TBL_VEICULO";
            st.executeUpdate(sql);
            st.close();

            System.out.println("\nTBL_VEICULO eliminada com sucesso!");

        } catch (SQLException e) {
            System.out.println("\nErro no drop da TBL_VEICULO: " + e.getMessage());
        } finally {
            try {
                if (st != null) st.close();
            } catch (SQLException e) {
                System.out.println("\nErro no drop da TBL_VEICULO: " + e.getMessage());
            }
        }
    }

    public void deletarVeiculoPorChassi(String numero_chassi) {
        PreparedStatement pst = null;

        try {
            if (con == null) {
                System.out.println("Erro: Conexão não estabelecida.");
                return;
            }

            String sql = "DELETE FROM TBL_VEICULO WHERE numero_chassi = ?";
            pst = con.prepareStatement(sql);
            pst.setString(1, numero_chassi);
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Veículo com chassi " + numero_chassi + " removido com sucesso!");
            } else {
                System.out.println("Veículo com chassi " + numero_chassi + " não encontrado.");
            }
        } catch (SQLException e) {
            System.out.println("Erro ao deletar veículo: " + e.getMessage());
        } finally {
            try {
                if (pst != null) pst.close();
            } catch (SQLException e) {
                System.out.println("Erro ao fechar a conexão: " + e.getMessage());
            }
        }
    }
}
